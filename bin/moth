#!/usr/bin/env python

import os, sys
from os.path import join, isfile, dirname
from subprocess import check_call

def mkdir_p(path):
    try:
        os.makedirs(path)
    except OSError as exc:  # Python >2.5
        if exc.errno == errno.EEXIST and os.path.isdir(path):
            pass
        else:
            raise

def find_vcs_root(test, dirs=(".git",)):
    prev, test = None, os.path.abspath(test)
    while prev != test:
        if any(os.path.isdir(os.path.join(test, d)) for d in dirs):
            return test
        prev, test = test, os.path.abspath(os.path.join(test, os.pardir))
    raise Exception("No project root found")

def fetch(artifact_id, version, target):
    print "Fetching:", artifact_id, version
    path = dirname(target)
    if path:
        mkdir_p(path)
    repo_dir = os.path.expanduser("~/.moth-repo")
    check_call(["cp", join(repo_dir,artifact_id,version,artifact_id), target])

def split_argv(argv):
    if '--' in argv:
        idx = argv.index('--')

        return [argv[:idx],argv[idx+1:]]
    else:
        return [argv, []]

def run(args):
    my_args, their_args = split_argv(args)

    action = my_args[0]
    assert action in ["run","path"]

    assert len(my_args) == 3

    artifact_id, version = my_args[1:]

    root_path = find_vcs_root(dirname(__file__))
    dot_dir = ".moth"

    target_fn = artifact_id

    fname = join(root_path,dot_dir,target_fn)

    if not isfile(fname):
        fetch(artifact_id, version, fname)

    if action == "run":
        os.execlp(fname, fname, *their_args)
    elif action == "path":
        print(fname)
    else:
        raise "Unknown action"

run(sys.argv[1:])
